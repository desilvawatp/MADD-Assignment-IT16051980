iOS App's backend is running!
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end:
         [ [Function: onReadableStreamEnd],
           [Function: bound socketOnEnd] ],
        drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close:
         [ [Function: bound socketOnClose],
           [Function: onServerResponseClose] ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish: [Function: bound onCorkedFinish] } },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] { 'x-powered-by': [ 'X-Powered-By', 'Express' ] } },
     [Symbol(asyncId)]: 11,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 4024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 12,
        [Symbol(triggerId)]: 11 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end:
         [ [Function: onReadableStreamEnd],
           [Function: bound socketOnEnd] ],
        drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close:
         [ [Function: bound socketOnClose],
           [Function: onServerResponseClose] ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish: [Function: bound onCorkedFinish] } },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] { 'x-powered-by': [ 'X-Powered-By', 'Express' ] } },
     [Symbol(asyncId)]: 11,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 4024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 12,
        [Symbol(triggerId)]: 11 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers:
   { 'content-type': 'application/json',
     'cache-control': 'no-cache',
     'postman-token': '50f00daf-5a36-4ea2-94de-abcc97b06b47',
     'user-agent': 'PostmanRuntime/7.6.0',
     accept: '*/*',
     host: 'localhost:3000',
     'accept-encoding': 'gzip, deflate',
     'content-length': '39',
     connection: 'keep-alive' },
  rawHeaders:
   [ 'Content-Type',
     'application/json',
     'cache-control',
     'no-cache',
     'Postman-Token',
     '50f00daf-5a36-4ea2-94de-abcc97b06b47',
     'User-Agent',
     'PostmanRuntime/7.6.0',
     'Accept',
     '*/*',
     'Host',
     'localhost:3000',
     'accept-encoding',
     'gzip, deflate',
     'content-length',
     '39',
     'Connection',
     'keep-alive' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/user/login',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end:
         [ [Function: onReadableStreamEnd],
           [Function: bound socketOnEnd] ],
        drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close:
         [ [Function: bound socketOnClose],
           [Function: onServerResponseClose] ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish: [Function: bound onCorkedFinish] } },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request:
            { [EventEmitter: app]
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: generateETag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views:
                  '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                 'jsonp callback name': 'callback' },
              locals:
               [Object: null prototype] {
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/all',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/items/',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/user/login',
                      keys: [],
                      regexp:
                       { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/login',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp:
                       { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                      route:
                       Route {
                         path: '/user/register',
                         stack:
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                              method: 'post' } ],
                         methods: { post: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle:
         TCP {
           reading: false,
           onread: null,
           onconnection: [Function: onconnection],
           [Symbol(owner)]: [Circular] },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 4 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] { 'x-powered-by': [ 'X-Powered-By', 'Express' ] } },
     [Symbol(asyncId)]: 11,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 4024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 12,
        [Symbol(triggerId)]: 11 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/user/login',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/user/login',
     path: '/user/login',
     href: '/user/login',
     _raw: '/user/login' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: true,
           onread: [Function: onStreamRead],
           onconnection: null,
           _consumed: true,
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         [Object: null prototype] {
           end:
            [ [Function: onReadableStreamEnd],
              [Function: bound socketOnEnd] ],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close:
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _events:
            [Object: null prototype] {
              request:
               { [EventEmitter: app]
                 _events: [Object: null prototype] { mount: [Function: onmount] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 off: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 rawListeners: [Function: rawListeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 source: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' },
                 locals:
                  [Object: null prototype] {
                    settings:
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views:
                        '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router:
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack:
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/all',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/user/login',
                         keys: [],
                         regexp:
                          { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/login',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp:
                          { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/register',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle:
            TCP {
              reading: false,
              onread: null,
              onconnection: [Function: onconnection],
              [Symbol(owner)]: [Circular] },
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::3000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(asyncId)]: 4 },
        _server:
         Server {
           _events:
            [Object: null prototype] {
              request:
               { [EventEmitter: app]
                 _events: [Object: null prototype] { mount: [Function: onmount] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 off: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 rawListeners: [Function: rawListeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 source: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' },
                 locals:
                  [Object: null prototype] {
                    settings:
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views:
                        '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router:
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack:
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/all',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/user/login',
                         keys: [],
                         regexp:
                          { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/login',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp:
                          { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/register',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle:
            TCP {
              reading: false,
              onread: null,
              onconnection: [Function: onconnection],
              [Symbol(owner)]: [Circular] },
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::3000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(asyncId)]: 4 },
        timeout: 120000,
        parser:
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           _consumed: true,
           onIncoming: [Function: bound parserOnIncoming],
           [Symbol(isReused)]: false },
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 4024,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(refed)]: false,
           [Symbol(asyncId)]: 12,
           [Symbol(triggerId)]: 11 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: true,
           onread: [Function: onStreamRead],
           onconnection: null,
           _consumed: true,
           [Symbol(owner)]: [Circular] },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         [Object: null prototype] {
           end:
            [ [Function: onReadableStreamEnd],
              [Function: bound socketOnEnd] ],
           drain: [ [Function: ondrain], [Function: bound socketOnDrain] ],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Function: socketOnError],
           close:
            [ [Function: bound socketOnClose],
              [Function: onServerResponseClose] ],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree:
            { next: null,
              entry: null,
              finish: [Function: bound onCorkedFinish] } },
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _events:
            [Object: null prototype] {
              request:
               { [EventEmitter: app]
                 _events: [Object: null prototype] { mount: [Function: onmount] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 off: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 rawListeners: [Function: rawListeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 source: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' },
                 locals:
                  [Object: null prototype] {
                    settings:
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views:
                        '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router:
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack:
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/all',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/user/login',
                         keys: [],
                         regexp:
                          { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/login',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp:
                          { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/register',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle:
            TCP {
              reading: false,
              onread: null,
              onconnection: [Function: onconnection],
              [Symbol(owner)]: [Circular] },
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::3000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(asyncId)]: 4 },
        _server:
         Server {
           _events:
            [Object: null prototype] {
              request:
               { [EventEmitter: app]
                 _events: [Object: null prototype] { mount: [Function: onmount] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 off: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 rawListeners: [Function: rawListeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 source: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: generateETag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views:
                     '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                    'jsonp callback name': 'callback' },
                 locals:
                  [Object: null prototype] {
                    settings:
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: generateETag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views:
                        '/Users/anushka/MADD/it16051980/it16051980-node-backend/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router:
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack:
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/all\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/all',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/items\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/items/',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/user/login',
                         keys: [],
                         regexp:
                          { /^\/user\/login\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/login',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp:
                          { /^\/user\/register\/?$/i fast_star: false, fast_slash: false },
                         route:
                          Route {
                            path: '/user/register',
                            stack:
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                                 method: 'post' } ],
                            methods: { post: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle:
            TCP {
              reading: false,
              onread: null,
              onconnection: [Function: onconnection],
              [Symbol(owner)]: [Circular] },
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           _pendingResponseData: 0,
           maxHeadersCount: null,
           _connectionKey: '6::::3000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(asyncId)]: 4 },
        timeout: 120000,
        parser:
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: bound onParserExecute],
           _headers: [],
           _url: '',
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           _consumed: true,
           onIncoming: [Function: bound parserOnIncoming],
           [Symbol(isReused)]: false },
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 4024,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(refed)]: false,
           [Symbol(asyncId)]: 12,
           [Symbol(triggerId)]: 11 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] { 'x-powered-by': [ 'X-Powered-By', 'Express' ] } },
  route:
   Route {
     path: '/user/login',
     stack:
      [ Layer {
          handle: [Function],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: { /^\/?$/i fast_star: false, fast_slash: false },
          method: 'post' } ],
     methods: { post: true } } }
